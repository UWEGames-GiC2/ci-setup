name: 'Setup'
description: 'Setup Ubuntu and Clang for CI checks'
inputs:
  build-type:  # id of input
    description: 'Build configuration type'
    required: false
    default: 'Debug'
runs:
  using: "composite"
  steps:
    - name: Print env
      shell: bash
      run: |
        echo github.event.action: ${{ github.event.action }}
        echo github.event_name: ${{ github.event_name }}

    - name: Install dependencies on Ubuntu
      shell: bash
      run: |
        echo
        echo "###################################################################"
        echo "######################### Install LLVM-13 #########################"
        echo "###################################################################"
        sudo wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        sudo apt-add-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main'
        sudo apt-get update
        sudo apt-get install -y binutils libstdc++6 clang-13 clang-format-13 clang-tidy-13 \
        llvm-13-dev libomp-13-dev cmake python3 libpng-dev libbz2-dev ninja-build
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-13 90
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-13 90
        sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-13 90
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 90
        echo
        echo "###################################################################"
        echo "######################## ASGE Dependencies ########################"
        echo "###################################################################"
        sudo apt-get install -y --no-install-recommends --no-install-suggests \
        libtbb-dev libharfbuzz-bin libharfbuzz-dev libxrandr-dev libxxf86vm-dev \
        libxi-dev libxinerama-dev libxcursor-dev libgl1-mesa-dev libglu1-mesa-dev \
        libbrotli-dev
        echo
        echo "###################################################################"
        echo "######################### Install CPPCHECK ########################"
        echo "###################################################################"
        # sudo snap install cppcheck && sudo ln -s /snap/bin/cppcheck /usr/bin/cppcheck
        curl -sLO http://de.archive.ubuntu.com/ubuntu/pool/universe/t/tinyxml2/libtinyxml2-8_8.0.0+dfsg-2_amd64.deb \
        && sudo dpkg -i libtinyxml2-8_8.0.0+dfsg-2_amd64.deb
        curl -sLO http://de.archive.ubuntu.com/ubuntu/pool/universe/z/z3/libz3-4_4.8.10-1ubuntu1_amd64.deb \
        && sudo dpkg -i libz3-4_4.8.10-1ubuntu1_amd64.deb
        curl -sLO http://de.archive.ubuntu.com/ubuntu/pool/universe/z/z3/libz3-dev_4.8.10-1ubuntu1_amd64.deb \
        && sudo dpkg -i libz3-dev_4.8.10-1ubuntu1_amd64.deb
        curl -sLO http://de.archive.ubuntu.com/ubuntu/pool/universe/c/cppcheck/cppcheck_2.3-1_amd64.deb && \
        sudo dpkg -i cppcheck_2.3-1_amd64.deb

    - name: Version Check
      shell: bash
      run: |
        /usr/bin/clang-13 --version
        /usr/bin/cppcheck --version
        cmake --version
        python3 --version
        ninja --version

    - name: Configure
      shell: bash
      run: |
        export CC=${CC}
        export CXX=${CXX}
        cmake -H. -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -Bbuild -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -G "Ninja"
